---
/* Static SVG “neural” graphic for the special-solutions hero.
   • Horizontal 3-4-4-3 grid (14 nodes)
   • Identical visual language to WhyAIGraphic.astro
*/

import {
  SECTOR_NODES,
  SECTOR_LINKS,
  ICONS,
  SIZE,
  GRAPH_COLORS,
} from './sectorGraph.data';

const RADIUS = SIZE.r;
const PAD    = 24;

/* ---------- compute viewBox bounds ---------- */
const xs = SECTOR_NODES.map(n => n.x);
const ys = SECTOR_NODES.map(n => n.y);

const minX = Math.min(...xs) - RADIUS - PAD;
const maxX = Math.max(...xs) + RADIUS + PAD;
const minY = Math.min(...ys) - RADIUS - PAD;
const maxY = Math.max(...ys) + RADIUS + PAD;

const vbW = maxX - minX;
const vbH = maxY - minY;

/* id → node quick lookup */
const byId = Object.fromEntries(SECTOR_NODES.map(n => [n.id, n]));

/* identical drop-shadow to other graphs */
const shadowOpacity = 0.2;
---

<svg
  {...Astro.props}
  viewBox={`${minX} ${minY} ${vbW} ${vbH}`}
  fill="none"
  xmlns="http://www.w3.org/2000/svg"
  class={`select-none overflow-visible w-full h-auto ${Astro.props.class ?? ''}`}
  aria-hidden="true"
>
  <defs>
    <filter id="ds" x="-50%" y="-50%" width="200%" height="200%">
      <feDropShadow dx="0" dy="4" stdDeviation="4"
                    flood-color={`rgba(0,0,0,${shadowOpacity})`} />
    </filter>
  </defs>

  <!-- links -->
  {SECTOR_LINKS.map(({ from, to }) => {
    const a = byId[from];
    const b = byId[to];

    const dx  = b.x - a.x;
    const dy  = b.y - a.y;
    const len = Math.hypot(dx, dy);

    /* clip line ends so they touch the circle borders, not centres */
    const sx = a.x + (dx / len) * RADIUS;
    const sy = a.y + (dy / len) * RADIUS;
    const ex = b.x - (dx / len) * RADIUS;
    const ey = b.y - (dy / len) * RADIUS;

    return (
      <line
        x1={sx} y1={sy} x2={ex} y2={ey}
        stroke={GRAPH_COLORS.line}
        stroke-width="2"
        stroke-linecap="round"
      />
    );
  })}

  <!-- nodes -->
  {SECTOR_NODES.map(n => (
    <g filter="url(#ds)">
      <circle
        cx={n.x}
        cy={n.y}
        r={RADIUS}
        fill={GRAPH_COLORS.node}
      />
      <image
        href={ICONS[n.icon]}
        width={RADIUS * 1.3}
        height={RADIUS * 1.3}
        x={n.x - (RADIUS * 1.3) / 2}
        y={n.y - (RADIUS * 1.3) / 2}
        preserveAspectRatio="xMidYMid meet"
        style="pointer-events:none"
      />
    </g>
  ))}
</svg>
